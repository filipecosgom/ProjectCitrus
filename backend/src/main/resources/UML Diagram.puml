@startuml
!theme plain

' --- Entities ---
class UserEntity {
  - email: String
  - password: String
  - name: String
  - surname: String
  - isAdmin: Boolean
  - isDeleted: Boolean
  - isManager: Boolean
  - office: Office
  - phone: String
  - birthdate: LocalDateTime
  - street: String
  - postalCode: String
  - municipality: String
  - biography: String
  - account_state: AccountState
  - role: Role
  - creation_date: LocalDateTime
  - manager: UserEntity
  - evaluations: List<EvaluationEntity>
  - courses: List<CourseEntity>
}

class EvaluationEntity {
  - id: Long
  - creation_date: LocalDateTime
  - score: Score
  - feedback: String
  - state: EvaluationState
  - cycle: CycleEntity
}

class CycleEntity {
  - id: Long
  - start_date: LocalDateTime
  - end_date: LocalDateTime
  - status: CycleStatus
}

class CourseEntity {
  - title: String
  - creation_date: LocalDateTime
  - duration: Integer
  - language: String
  - area: CourseArea
  - description: String
  - link: String
  - image_link: String
  - is_active: Boolean
}

class FinishedCourseEntity {
    - conclusion_date: LocalDateTime
}

class TokenEntity {
  - id: Long
  - type: TokenType
  - creation_date: LocalDateTime
  - is_revoked: Boolean
}

class ConfigurationEntity {
  - id: Long
  - login_time: Integer
  - verification_time: Integer
  - password_reset_time: Integer
  - creation_date: LocalDateTime
}

class NotificationEntity {
  - id: Long
  - type: NotificationType
  - content: String
  - creation_date: LocalDateTime
  - is_read: Boolean
  - message_count: Integer
}

class MessageEntity {
  - id: Long
  - sent_date: LocalDateTime
  - is_read: Boolean
  - message_content: String
}

' --- Repositories ---
class UserRepository {
  + createUser(User): UserEntity
  + findById(Long): UserEntity
}

class EvaluationRepository {
  + submitEvaluation(EvaluationDTO): Boolean
  + updateEvaluation(EvaluationDTO): Boolean
  + findEvaluation(EvaluationDTO): EvaluationEntity
}

class CycleRepository {
    + getCycles(): List<CycleEntity>
    + createCycle(CycleDTO): Boolean
    + updateCycle(CycleDTO): Boolean
}

class CourseRepository {
    + findCourse(String): CourseEntity
    + getCourses(): List<CourseEntity>
    + addCourse(CourseEntity): Boolean
    + updateCourse(CourseEntity): Boolean
    + inactivateCourse(String): Boolean
}

class TokenRepository {
    + createAuthenticationToken(UserEntity): TokenEntity
    + revokeToken(TokenEntity): Boolean
    + createActivationToken(UserEntity): TokenEntity
    + createPasswordResetToken(UserEntity): TokenEntity
}

class ConfigurationRepository {
    + getLatestConfiguration(): ConfigurationEntity
    + addConfiguration(ConfigurationEntity): Boolean
}

class NotificationRepository {
    + getNotification(UserEntity): List<NotificationEntity>
    + updateNotification(Long): Boolean
    + addNotification(NotificationEntity): Boolean
}

class MessageRepository {
    + getMessage(UserEntity, UserEntity): List<MessageEntity>
    + newMessage(MessageEntity): Boolean
    + updateMessage(MessageEntity): Boolean
}


' --- Service Layer ---
class UserService {
  + createUser(UserDTO): UserDTO
  + findUserById(Long): UserDTO
}

class EvaluationService {
  + submitEvaluation(EvaluationDTO): EvaluationDTO
  + editEvaluation(EvaluationDTO): Boolean
  + findEvaluation(EvaluationDTO): EvaluationDTO
}

class CycleService {
    + findCurrentCycle(): CycleDTO
    + getCycles(): List<CycleDTO>
    + createCycle(CycleDTO): Boolean
    + updateCycle(CycleDTO): Boolean
}

class CourseService {
    + getCourse(String): CourseDTO
    + getCourses(): List<CourseDTO>
    + createCourse(CourseDTO): Boolean
    + updateCourse(String): Boolean
    + inactivateCourse(String): Boolean
}

class TokenService {
    + createAuthenticationToken(UserDto): TokenDTO
    + revokeToken(TokenDTO): Boolean
    + createActivationToken(UserDTO): TokenDTO
    + createPasswordResetToken(UserDTO): TokenDTO
}

class ConfigurationService {
    + getLatestConfiguration(): ConfigurationDTO
    + addConfiguration(): Boolean
}

class NotificationService {
    + getNotifications(UserDTO): List<NotificationDTO>
    + updateNotification(NotificationDTO): Boolean
    + createNotification(NotificationDTO): Boolean
}

class MessageService {
    + getMessages(UserDTO, UserDTO): List<MessageDTO>
    + archiveNewMessage(MessageDTO): Boolean
    + updateMessage(MessageDTO): Boolean
}


' --- REST Controllers ---
class AuthenticationController {
  + register(UserDTO): Response
  + login(UserDTO): Response
  + logout(UserDTO): Response
  + activate(TokenDTO): Response
}

class UserController {
    + getUser(String, String, String, Parameter, Order): Response
    + updateUser(String): Response
    + deleteUser(String): Response
}

class CycleController {
    + getCurrentCycle(String): Response
    + getCycles(): Response
    + createCycle(String): Response
    + updateCycle(String): Response
}

class EvaluationController {
    + getEvaluation(String, Long): Response
    + updateEvaluation(String, Long): Response
    + deleteEvaluation(String, Long): Response
}

class ConfigurationController {
    + getLatestConfiguration(): Response
    + postConfiguration(String): Response
}

class CourseController {
    + getCourses(): Response
    + updateCourse(CourseDTO): Response
    + inactivateCourse(CourseDTO): Response
}



class NotificationController {
    + getNotifications(UserDTO): Response
    + updateNotification(NotificationDTO): Response
}

class MessageController {
    + getConversation(UserDTO, UserDTO): Response
    + updateMessage(MessageDTO): Response
}

' --- Relationships ---
' --- User ---
UserEntity "1" --> "0.*" EvaluationEntity : isEvaluated >
UserEntity "1" --> "0.*" EvaluationEntity : evaluates >
UserEntity "1" --> "0.*" UserEntity : manages >
UserEntity "0.*" --> "0.*" CourseEntity : creates >
UserEntity "1" --> "0.*" FinishedCourseEntity: finishes >
UserEntity "1" --> "0.*" MessageEntity : receives >
UserEntity "1" --> "0.*" MessageEntity : sends >
UserEntity "1" --> "1.*" CycleEntity : initiates >
UserEntity "1" --> "0.*" TokenEntity : has >
UserEntity --> Office : uses
UserEntity --> AccountState : uses
UserController --> UserService : uses
UserService --> UserRepository : uses
UserRepository --> UserEntity : uses

' --- Evaluation ---
EvaluationEntity "1,*" --> "1" CycleEntity
EvaluationController --> EvaluationService : uses
EvaluationService --> EvaluationRepository : uses
EvaluationRepository --> EvaluationEntity : uses
EvaluationEntity --> EvaluationState : uses
EvaluationEntity --> EvaluationStatus : uses

' --- Cycles ---
CycleController --> CycleService : uses
CycleService --> CycleRepository : uses
CycleRepository --> CycleEntity : uses
CycleEntity --> CycleStatus : uses

' --- Courses ---
CourseController --> CourseService : uses
CourseService --> CourseRepository : uses
CourseRepository --> CourseEntity : uses
CourseEntity --> CourseArea : uses

' --- FinishedCourses ---
FinishedCourseEntity "0.*" --> "1" CourseEntity : references



' --- Token ---
AuthenticationController --> TokenService : uses
TokenService --> TokenRepository : uses
TokenRepository --> TokenEntity : uses
TokenEntity --> TokenType : uses

' --- Configuration ---
ConfigurationController --> ConfigurationService : uses
ConfigurationService --> ConfigurationRepository : uses
ConfigurationRepository --> ConfigurationEntity : uses

' --- Notification ---
NotificationController --> NotificationService : uses
NotificationService --> NotificationRepository : uses
NotificationRepository --> NotificationEntity : uses
NotificationEntity --> NotificationType : uses

' --- Messages ---
MessageController --> MessageService : uses
MessageService --> MessageRepository : uses
MessageRepository --> MessageEntity : uses


' --- Enums ---
enum Office {
  LISBON
  COIMBRA
  OPORTO
  VISEU
  MUNICH
  BOSTON
  SOUTHAMPTON
}

enum CourseArea {
    FRONTEND
    BACKEND
    INFRASTRUCTURE
    UX/UI
}

enum TokenType {
    AUTHENTICATION
    VALIDATION
    PASSWORD_RESET
}

enum NotificationType {
    MESSAGE
    EVALUATION
}

enum AccountState {
    UNVERIFIED
    INCOMPLETE
    COMPLETE
}

enum EvaluationStatus {
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum CycleStatus {
  OPEN
  CLOSED
}

enum Parameter {
    FIRST_NAME
    SURNAME
    EMAIL
    DATE
}

enum Order {
    ASCENDING
    DESCENDING
}

' --- Jakarta EE Annotations ---
note top of UserEntity
  @Entity
  @Table(name="useraccount")
end note

note top of CycleEntity
  @Entity
  @Table(name="cycle")
end note

note top of EvaluationEntity
  @Entity
  @Table(name="evaluation")
end note

note top of MessageEntity
  @Entity
  @Table(name="message")
end note

note top of CourseEntity
  @Entity
  @Table(name="course")
end note

note top of TokenType
  @Entity
  @Table(name="token")
end note

note top of ConfigurationEntity
  @Entity
  @Table(name="config")
end note

note top of NotificationEntity
  @Entity
  @Table(name="notification")
end note

@enduml