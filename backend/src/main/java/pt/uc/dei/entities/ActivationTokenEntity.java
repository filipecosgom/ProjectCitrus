package pt.uc.dei.entities;

import jakarta.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * Entity representing an activation token.
 * Used for user account activation.
 */
@NamedQueries({
        @NamedQuery(
                name = "ActivationToken.findTemporaryUserByToken",
                query = "SELECT t.temporaryUser FROM ActivationTokenEntity t WHERE t.tokenValue = :tokenValue"
        ),
        @NamedQuery(
                name = "ActivationToken.findActivationTokenByValue",
                query = "SELECT t FROM ActivationTokenEntity t WHERE t.tokenValue = :tokenValue"
        ),
        @NamedQuery(
                name = "ActivationToken.findActivationTokensOfUser",
                query = "SELECT t FROM ActivationTokenEntity t WHERE t.temporaryUser.id = :id"
        )
})
/**
 * JPA entity representing an activation token for user account activation.
 * <p>
 * Each instance corresponds to a row in the <code>activationtoken</code> table and is associated with a temporary user.
 * <ul>
 *   <li><b>id</b>: Unique identifier, auto-generated by the database.</li>
 *   <li><b>tokenValue</b>: Unique token string for account activation, indexed for fast lookup.</li>
 *   <li><b>creationDate</b>: Timestamp when the token was created, used for expiration logic.</li>
 *   <li><b>temporaryUser</b>: Associated temporary user entity, indexed for efficient user-token queries.</li>
 * </ul>
 * <b>Indexes:</b>
 * <ul>
 *   <li><b>idx_activationtoken_tokenvalue</b>: Unique index on <code>tokenValue</code> for fast lookup by token value (used in account activation and token validation queries).</li>
 *   <li><b>idx_activationtoken_temporary_user_id</b>: Non-unique index on <code>temporary_user_id</code> for efficient retrieval of all tokens associated with a temporary user (used in getTokensOfUser).</li>
 * </ul>
 */
@Entity
@Table(name = "activationtoken",
    indexes = {
        /**
         * Unique index on tokenValue for fast lookup and to enforce uniqueness.
         * Used in queries such as findActivationTokenByValue and findTemporaryUserByToken.
         */
        @Index(name = "idx_activationtoken_tokenvalue", columnList = "tokenValue", unique = true),
        /**
         * Non-unique index on temporary_user_id for efficient retrieval of tokens by user.
         * Used in findActivationTokensOfUser and getTokensOfUser.
         */
        @Index(name = "idx_activationtoken_temporary_user_id", columnList = "temporary_user_id")
    }
)
/**
 * Represents an activation token used for user account verification.
 * <p>
 * Each token is uniquely generated and associated with a temporary user account
 * during the registration process.
 */

/**
 * Represents an activation token used for user account verification.
 * Each token is uniquely generated and associated with a temporary user account during registration.
 */
public class ActivationTokenEntity implements Serializable {

    /**
     * The unique identifier for the activation token.
     * <p>
     * Automatically generated by the database.
     */
    @Id
    @Column(name = "id", nullable = false, unique = true, updatable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The unique token string used for account activation.
     * <p>
     * Stored as a cryptographically secure random value. Indexed for fast lookup and uniqueness.
     */
    @Column(name = "tokenValue", unique = true, nullable = false)
    private String tokenValue;

    /**
     * The timestamp when this token was created.
     * <p>
     * Used to determine token expiration and for auditing purposes.
     */
    @Column(name = "creation_date", nullable = false, updatable = false)
    private LocalDateTime creationDate;

    /**
     * The temporary user account associated with this activation token.
     * <p>
     * Nullable to allow for token pre-generation scenarios. Indexed for efficient user-token queries.
     */
    @OneToOne
    @JoinColumn(name = "temporary_user_id", nullable = true)
    private TemporaryUserEntity temporaryUser;


    // Getters and setters

    /**
     * Retrieves the activation token ID.
     *
     * @return The unique identifier of the token.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the activation token ID.
     *
     * @param id The unique identifier to be set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the activation token value.
     *
     * @return The token string used for account activation.
     */
    public String getTokenValue() {
        return tokenValue;
    }

    /**
     * Sets the activation token value.
     *
     * @param tokenValue The token string to be set for account activation.
     */
    public void setTokenValue(String tokenValue) {
        this.tokenValue = tokenValue;
    }

    /**
     * Retrieves the creation date of the activation token.
     *
     * @return The creation timestamp of the token.
     */
    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    /**
     * Sets the creation date of the activation token.
     *
     * @param creationDate The timestamp to be set for when the token was created.
     */
    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    /**
     * Retrieves the temporary user account associated with this activation token.
     *
     * @return The associated temporary user entity, or null if not set.
     */
    public TemporaryUserEntity getTemporaryUser() {
        return temporaryUser;
    }

    /**
     * Sets the temporary user account associated with this activation token.
     *
     * @param temporaryUser The temporary user entity to associate with this token.
     */
    public void setTemporaryUser(TemporaryUserEntity temporaryUser) {
        this.temporaryUser = temporaryUser;
    }
}