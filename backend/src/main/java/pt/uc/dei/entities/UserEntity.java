package pt.uc.dei.entities;

import jakarta.persistence.*;
import pt.uc.dei.enums.AccountState;
import pt.uc.dei.enums.Office;
import pt.uc.dei.enums.Role;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Represents a system user with personal and account information.
 * <p>
 * Stores complete user profile including authentication details, roles,
 * and organizational relationships. Managed through the user lifecycle
 * from registration to deletion.
 */
@NamedQueries({
        @NamedQuery(
                name = "User.findUserByEmail",
                query = "SELECT u FROM UserEntity u WHERE u.email = :email"
        ),
        @NamedQuery(
                name = "User.findUserById",
                query = "SELECT u FROM UserEntity u WHERE u.id = :id"
        )
})
@Entity
@Table(
        name = "useraccount",
        indexes = {
                @Index(name = "idx_user_email", columnList = "email", unique = true),
                @Index(name = "idx_user_id", columnList = "id", unique = true)
        }
)
public class UserEntity implements Serializable {
    private static final long serialVersionUID = 1L;

    /** Unique identifier, auto-generated by database */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, updatable = false)
    private Long id;

    /** User's unique email address (RFC 5321 compliant) */
    @Column(name = "email", nullable = false, unique = true, updatable = false, length = 254)
    private String email;

    /** Securely hashed password */
    @Column(name = "password", nullable = false)
    private String password;

    /** URL or path to user's profile picture */
    @Column(name = "avatar")
    private String avatar;

    /** User's first name */
    @Column(name = "name")
    private String name;

    /** User's last name */
    @Column(name = "surname")
    private String surname;

    /** Administrator status flag */
    @Column(name = "is_admin", nullable = false, columnDefinition = "boolean default false")
    private Boolean isAdmin = false;

    /** Soft-delete flag */
    @Column(name = "is_deleted", nullable = false, columnDefinition = "boolean default false")
    private Boolean isDeleted = false;

    /** Managerial status flag */
    @Column(name = "is_manager", nullable = false, columnDefinition = "boolean default false")
    private Boolean isManager = false;

    /** User's primary office location */
    @Enumerated(EnumType.STRING)
    @Column(name = "office", columnDefinition = "VARCHAR(20) DEFAULT 'NO_OFFICE'")
    private Office office = Office.NO_OFFICE;

    /** Contact phone number */
    @Column(name = "phone")
    private String phone;

    /** Date of birth */
    @Column(name = "birthdate")
    private LocalDateTime birthdate;

    /** Street address */
    @Column(name = "street")
    private String street;

    /** Postal/ZIP code */
    @Column(name = "postalcode")
    private String postalCode;

    /** City/Municipality */
    @Column(name = "municipality")
    private String municipality;

    /** Personal description/bio */
    @Column(name = "biography")
    private String biography;

    /** Current account status */
    @Enumerated(EnumType.STRING)
    @Column(name = "account_state", nullable = false, columnDefinition = "VARCHAR(20) DEFAULT 'INCOMPLETE'")
    private AccountState accountState = AccountState.INCOMPLETE;

    /** System role/permissions */
    @Enumerated(EnumType.STRING)
    @Column(name = "role", nullable = false, columnDefinition = "VARCHAR(20) DEFAULT 'WITHOUT_ROLE'")
    private Role role = Role.WITHOUT_ROLE;

    /** Account creation timestamp (auto-set) */
    @Column(name = "creation_date", nullable = false, updatable = false)
    private LocalDateTime creationDate = LocalDateTime.now();

    @Column(name = "secretKey", nullable = false, updatable = false)
    private String secretKey;

    /** Manager reference (self-relationship) */
    @ManyToOne
    @JoinColumn(name = "manager_id")
    private UserEntity managerUser;

    /** Performance evaluations received */
    @OneToMany(mappedBy = "appraisedUser", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<AppraisalEntity> evaluationsReceived = new ArrayList<>();

    /** Performance evaluations given */
    @OneToMany(mappedBy = "appraisingUser", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<AppraisalEntity> evaluationsGiven = new ArrayList<>();

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<FinishedCourseEntity> completedCourses = new HashSet<>();

    // Constructors
    public UserEntity() {
        // Default constructor required by JPA
    }

    // Required fields constructor
    public UserEntity(String email, String password) {
        this.email = email;
        this.password = password;
        this.creationDate = LocalDateTime.now();
    }



    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public Boolean getAdmin() {
        return isAdmin;
    }

    public void setAdmin(Boolean admin) {
        isAdmin = admin;
    }

    public Boolean getDeleted() {
        return isDeleted;
    }

    public void setDeleted(Boolean deleted) {
        isDeleted = deleted;
    }

    public List<AppraisalEntity> getEvaluationsReceived() {
        return evaluationsReceived;
    }

    public void setEvaluationsReceived(List<AppraisalEntity> evaluationsReceived) {
        this.evaluationsReceived = evaluationsReceived;
    }

    public List<AppraisalEntity> getEvaluationsGiven() {
        return evaluationsGiven;
    }

    public void setEvaluationsGiven(List<AppraisalEntity> evaluationsGiven) {
        this.evaluationsGiven = evaluationsGiven;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public Set<FinishedCourseEntity> getCompletedCourses() {
        return completedCourses;
    }

    public void setCompletedCourses(Set<FinishedCourseEntity> completedCourses) {
        this.completedCourses = completedCourses;
    }

    public Office getOffice() {
        return office;
    }

    public void setOffice(Office office) {
        this.office = office;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public LocalDateTime getBirthdate() {
        return birthdate;
    }

    public void setBirthdate(LocalDateTime birthdate) {
        this.birthdate = birthdate;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getMunicipality() {
        return municipality;
    }

    public void setMunicipality(String municipality) {
        this.municipality = municipality;
    }

    public String getBiography() {
        return biography;
    }

    public void setBiography(String biography) {
        this.biography = biography;
    }

    public AccountState getAccountState() {
        return accountState;
    }

    public void setAccountState(AccountState accountState) {
        this.accountState = accountState;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    public Boolean getManager() {
        return isManager;
    }

    public void setManager(Boolean manager) {
        isManager = manager;
    }

    public UserEntity getManagerUser() {
        return managerUser;
    }

    public void setManagerUser(UserEntity managerUser) {
        this.managerUser = managerUser;
    }

    public String getSecretKey() {
        return secretKey;
    }

    public void setSecretKey(String secretKey) {
        this.secretKey = secretKey;
    }
}